@model IEnumerable<WeeklyReport.Models.Project>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div id="content" class="span10">
    <!-- content starts -->

    <div>
        <ul class="breadcrumb">
            <li>
                <a href="#">Home</a> <span class="divider">/</span>
            </li>
            <li>
                <a href="#">Tables</a>
            </li>
        </ul>
    </div>
    <div class="row-fluid sortable">
        <div class="box span12">
            <div class="box-header well" data-original-title>
                <h2><i class="icon-user"></i> Members</h2>
                <div class="box-icon">
                    <a href="#" class="btn btn-setting btn-round"><i class="icon-cog"></i></a>
                    <a href="#" class="btn btn-minimize btn-round"><i class="icon-chevron-up"></i></a>
                    <a href="#" class="btn btn-close btn-round"><i class="icon-remove"></i></a>
                </div>
            </div>
            <div>
                <div class="demo-content">
                    <div class="row">
                        <div class="span24">
                            <div id="grid">

                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div><!--/row-->
</div>
<div id="contentDialog" class="hide">
    <form class="form-horizontal" id="projectForm" method="post">
        <div class="row">
            <div class="control-group span8">
                <label class="control-label"><s>*</s>Project Name：</label>
                <div class="controls">
                    <input name="Name" type="text" data-rules="{required:true}" class="input-normal control-text">
                </div>
            </div>
            <div class="control-group span8">
                <label class="control-label"><s>*</s>  Leader：</label>
                <div class="controls">
                    <div id="leaderSelect">
                        <input type="hidden" id="hide" name="LeaderId" >
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            @*<div class="control-group span8 ">
                    <label class="control-label">StartData：</label>
                    <div id="range" class="controls">
                        <input name="StartData" class="calendar" type="text" value="StartData">
                    </div>
                </div>*@
            <div class="control-group span8">
                <label class="control-label">Members：</label>
                <div id="memberSelect" class="controls control-row4">
                    <input type="hidden" id="hide" value="Members" name="hide">
                </div>
            </div>
            <div class="control-group span8">
                <label class="control-label">Color：</label>
                <div class="controls">
                    <select name="Color" class="input-normal">
                        <option value="">options</option>
                        <option value="1">red</option>
                        <option value="2">yellow</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="control-group span15">
                <label class="control-label">Description：</label>
                <div class="controls control-row4">
                    <textarea name="Description" class="input-large" type="text"></textarea>
                </div>
            </div>
        </div>
    </form>
</div>

<script src="~/Scripts/jquery-1.8.2.js"></script>
<script src="~/Scripts/BUI/bui.js"></script>
<script src="~/Scripts/lodash.js"></script>
<script type="text/javascript">
    var Grid = BUI.Grid,
        Data = BUI.Data,
        Grid = Grid,
        Store = Data.Store,
        userStore = new Data.Store(
        {
            url: "/User/GetUserForSelect",
            autoLoad: true
        }),
        enumColor = {"1":"red","2":"yellow"},
        columns = [
            { title: 'Name', dataIndex: 'Name', width: 50, elCls: 'center' },
            { title: 'Leader', dataIndex: 'LeaderId', width: 50, elCls: 'center' },
            {
                title: 'StartData',
                dataIndex: 'StartDate',
                width: 80,
                elCls: 'center',
                renderer: function (value) {
                    if (value) {
                        return value.substring(0, 10);
                    }
                    return '--';
                }
            },
            {
                title: 'Members',
                dataIndex: 'User',
                width: 100,
                elCls: 'center',
                renderer: function (members) {
                    var memberString = "";
                    if (members) {
                        for (var i = 0; i < members.length; i++) {
                            memberString = memberString + members[i].UserId + ",";
                        }
                        return memberString.substring(0, memberString.length - 1);
                    }
                    return '--';
                }
            },
            { title: 'Description', dataIndex: 'Description', width: 50, elCls: 'center' },
            { title: 'Status', dataIndex: 'Status', width: 50, elCls: 'center' },
            { title: 'Color', dataIndex: 'Color', width: 50, elCls: 'center'},//, renderer: Grid.Format.enumRenderer(enumColor) },
            { title: 'Action', renderer: function () { return '<span class="grid-command btn-edit">Edit</span>'; } }
        ],
        Select = BUI.Select,
        memberSelect = new Select.Select({
            render: '#memberSelect',
            valueField: '#hide',
            multipleSelect: true,
            store: userStore
        }),
        leaderSelect = new Select.Select({
            render: '#leaderSelect',
            valueField: '#hide',
            store: userStore
        });
    console.log(userStore);
    memberSelect.render();
    leaderSelect.render();

    var editing = new Grid.Plugins.DialogEditing({
        contentId: 'contentDialog', //设置隐藏的Dialog内容
        triggerCls: 'btn-edit', //触发显示Dialog的样式
        editor: {
            //title: 'Submit', buttons: [
            //      {
            //          text: 'Submit',
            //          elCls: 'btn btn-primary',
            //          handler: function () {
            //              this.close();
            //          }
            //      }, {
            //          text: 'Close',
            //          elCls: 'btn',
            //          handler: function () {
            //              this.close();
            //          }
            //      }
            //],
            success: function () {
                var edtor = this,
                form = edtor.get('form'),
                editType = editing.get('editType'),//add 或者 edit
                url = 'data/save.php';
                url += '?saveType=' + editType;
                form.valid();
                if (form.isValid()) {
                    form.ajaxSubmit({ //表单异步提交
                        url: url,
                        success: function (data) {
                            if (editType == 'add') {
                                //do something
                            } else {
                                //do other
                            }
                            //将a 改成 1 测试一下显示错误
                            if (data.hasError) { //返回的数据是 {hasError : fasle,error : 'xxxx',field : 'xxx'},也可以是任意格式的数据如 ： {success : false,'error' : 'xxxxx'}
                                var field = data.field;
                                form.getField(field).showErrors([data.error]); //也可以多个字段的错误信息 例如 errors : [{field : 'a',error: 'addd'},{field : 'a',error: 'addd'}]
                            } else {
                                edtor.accept();
                            }

                        },
                        error: function () {
                            //do something
                        }
                    });
                }
            }
        }
    }),
    store = new Store({
        url: '/Project/GetProject',
        autoLoad: true,
        pageSize: 2
    }),
     grid = new Grid.Grid({
         render: '#grid',
         columns: columns,
         //width: '100%',
         forceFit: true,
         tbar: { //添加、删除
             items: [{
                 btnCls: 'btn btn-small',
                 text: '<i class="icon-plus"></i>Add',
                 listeners: {
                     'click': addFunction
                 }
             },
             {
                 btnCls: 'btn btn-small',
                 text: '<i class="icon-remove"></i>Delete',
                 listeners: {
                     'click': delFunction
                 }
             }]
         },
         plugins: [editing, Grid.Plugins.CheckSelection],
         store: store
     });

    grid.render();

    //添加记录
    function addFunction() {
        var newData = { b: 0 };
        editing.add(newData, 'a'); //添加记录后，直接编辑
    }
    //删除选中的记录
    function delFunction() {
        var selections = grid.getSelection();
        store.remove(selections);
    }
</script>
