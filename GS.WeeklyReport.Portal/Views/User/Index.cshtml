@using WeeklyReport.Models
@model IEnumerable<WeeklyReport.Models.User>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div id="content" class="span10">
    <!-- content starts -->

    <div>
        <ul class="breadcrumb">
            <li>
                <a href="#">Home</a> <span class="divider">/</span>
            </li>
            <li>
                <a href="#">Tables</a>
            </li>
        </ul>
    </div>
    <div class="row-fluid sortable">
        <div class="box span12">
            <div class="box-header well" data-original-title>
                <h2><i class="icon-user"></i> Members</h2>
                <div class="box-icon">
                    <a href="#" class="btn btn-setting btn-round"><i class="icon-cog"></i></a>
                    <a href="#" class="btn btn-minimize btn-round"><i class="icon-chevron-up"></i></a>
                    <a href="#" class="btn btn-close btn-round"><i class="icon-remove"></i></a>
                </div>
            </div>
            <div>
                <div class="demo-content">
                    <div class="row">
                        <div class="span24">
                            <div id="grid">

                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div><!--/row-->
</div>
<div id="contentDialog" class="hide">
    <form class="form-horizontal">
        <div class="row">
            <div class="control-group span8">
                <label class="control-label"><s>*</s>UserName：</label>
                <div class="controls">
                    <input name="UserName" type="text"  class="input-normal control-text">
                    <input name="UserId" type="hidden" />
                </div>
            </div>
            <div class="control-group span8">
                <label class="control-label"><s>*</s>Name：</label>
                <div class="controls">
                    <input name="Name" type="text"  class="input-normal control-text">
                </div>
            </div>
        </div>
        <div class="row">
            <div class="control-group span8">
                <label class="control-label"><s>*</s>Role：</label>
                <div id="Role" class="controls bui-form-field-select" data-select="">
                    <input type="hidden" name="RoleId">
                </div>
            </div>
            <div class="control-group span8">
                <label class="control-label"><s>*</s>CreateData：</label>
                <div id="range" class="controls">
                    <input name="CreateDate" class="calendar" type="text">
                </div>
               
            </div>
        </div>
        <div class="row">
            <div class="control-group span8">
                <label class="control-label"><s>*</s>UpdataDate：</label>
                <div id="range" class="controls">
                    <input name="UpdateDate" class="calendar" type="text">
                </div>
            </div>
            <div class="control-group span8">
                <label class="control-label">多选：</label>
                <div id="Project" class="controls bui-form-field-select" data-select="">
                    <input type="hidden" name="Projects">
                </div>
            </div>
        </div>
    </form>
</div>
<script src="~/Scripts/jquery-1.8.2.min.js"></script>
<script src="~/Scripts/BUI/bui.js"></script>
<script src="~/Scripts/lodash.js"></script>
<script src="~/Scripts/json2.js"></script>
<script type="text/javascript">
    var Grid = BUI.Grid,
        Data = BUI.Data,
        Grid = Grid,
        Store = Data.Store,
        Select = BUI.Select,
        JitemsSelect = "[{",
        Jitems ={},
        Roles = {},
        RolesSelect="[{";
    $.ajaxSetup({
        async: false
    });
    $.getJSON('../Project/GetProjiectForSelect', function(data) {
        if (data) {
            for (var i = 0; i < data.length; i++) {
                Jitems[data[i].value] = data[i].text;
                if (i != data.length - 1) {
                    JitemsSelect = JitemsSelect + "'value':'" + data[i].value + "','text':'" + data[i].text + "'},{";
                } else {
                    JitemsSelect = JitemsSelect + "'value':'" + data[i].value + "','text':'" + data[i].text + "'}]";
                }
            }
            $("#Project").attr("data-select", "{multipleSelect:true,items:" + JitemsSelect + "}");
        }
    });
        $.getJSON('/User/GetRoleselect', function (datas) {
            if (datas) {
                for (var z = 0; z < datas.length; z++) {
                    Roles[datas[i].value] = datas[i].text;
                    if (i != datas.length-1)
                    { 
                        RolesSelect = RolesSelect + "'value':'" + datas[i].value + "','text':'" + datas[i].text + "'},{";
                    }
                    else {
                        RolesSelect = RolesSelect + "'value':'" + datas[i].value + "','text':'" + datas[i].text + "'}]";
                    }
                }
                $("#Role").attr("data-select", "{multipleSelect:true,items:" + JitemsSelect + "}");
            }
    });
    console.log(JitemsSelect);
    var userStore = new Data.Store(
       {
           url: "/User/GetUserForSelect",
           autoLoad: true
       }),
       columns = [
       { title: 'UserName', dataIndex: 'UserName', width: 50, elCls: 'center' },
       { title: 'Name', dataIndex: 'Name', width: 50, elCls: 'center' },
       { title: 'Role', dataIndex: 'RoleId', width: 50, elCls: 'center', renderer: Grid.Format.multipleItemsRenderer(Role) },
       {
           title: 'CreateDate', dataIndex: 'CreateDate', width: 50, elCls: 'center', renderer: function (value) {
               if (value) {
                   return value.substring(0, 10);
               }
               return '--';
           }
       },
        {
            title: 'UpdateDate', dataIndex: 'UpdateDate', width: 50, elCls: 'center', renderer: function (value) {
                if (value) {
                    return value.substring(0, 10);
                }
                return '--';
            }
        },
       { title: 'Projects', dataIndex: 'Projects', width: 50, elCls: 'center', renderer: Grid.Format.multipleItemsRenderer(Jitems) },
       { title: 'Action', renderer: function () { return '<span id="Edit" class="grid-command btn-edit">Edit</span>'; } }
       ],

   memberSelect = new Select.Select({
       render: '#memberSelect',
       valueField: '#inputMember',
       multipleSelect: true,
       store: userStore
   }),
   leaderSelect = new Select.Select({
       render: '#leaderSelect',
       valueField: '#inputLeader',
       store: userStore
   });

    memberSelect.render();
    leaderSelect.render();

    var editing = new Grid.Plugins.DialogEditing({
        contentId: 'contentDialog', //设置隐藏的Dialog内容
        triggerCls: 'btn-edit', //触发显示Dialog的样式
        editor: {
            success: function () {
                var edtor = this,
                form = edtor.get('form'),
                editType = editing.get('editType'),//add 或者 edit
                url = '/User/EditSaveProject';
                url += '?saveType=' + editType;
                form.valid();
                if (form.isValid()) {
                    form.ajaxSubmit({ //表单异步提交
                        url: url,
                        success: function (data) {
                            if (editType == 'add') {
                                //do something
                            } else {
                                //do other
                            }
                            //将a 改成 1 测试一下显示错误
                            if (data.hasError) { //返回的数据是 {hasError : fasle,error : 'xxxx',field : 'xxx'},也可以是任意格式的数据如 ： {success : false,'error' : 'xxxxx'}
                                var field = data.field;
                                form.getField(field).showErrors([data.error]); //也可以多个字段的错误信息 例如 errors : [{field : 'a',error: 'addd'},{field : 'a',error: 'addd'}]
                            } else {
                                edtor.accept();
                            }

                        },
                        error: function () {
                            //do something
                        }
                    });
                }
            }
        }
    }),
    store = new Store({
        url: '/User/GetUsers',
        autoLoad:true,
        pageSize: 2
    }),
     grid = new Grid.Grid({
         render: '#grid',
         columns: columns,
         //width: '100%',
         forceFit: true,
         tbar: { //添加、删除
             items: [{
                 btnCls: 'btn btn-small',
                 text: '<i class="icon-plus"></i>Add',
                 listeners: {
                     'click': addFunction
                 }
             },
             {
                 btnCls: 'btn btn-small',
                 text: '<i class="icon-remove"></i>Delete',
                 listeners: {
                     'click': delFunction
                 }
             }]
         },
         plugins: [editing, Grid.Plugins.CheckSelection],
         store: store
     });

    grid.render();

    //添加记录
    function addFunction() {
        var newData = { b: 0 };
        editing.add(newData, 'a'); //添加记录后，直接编辑
    }
    //删除选中的记录
    function delFunction() {
        var selections = grid.getSelection();
        store.remove(selections);
    }
</script>

